diff --git a/src/com/ece/alarmmanager/AlarmActivity.java b/src/com/ece/alarmmanager/AlarmActivity.java
index b164065..7dd8fdf 100644
--- a/src/com/ece/alarmmanager/AlarmActivity.java
+++ b/src/com/ece/alarmmanager/AlarmActivity.java
@@ -57,7 +57,15 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
 	  private List<Sensor> sensors;
 	  private Sensor mAccelerometer;	  
 	  private static int SHAKE_THRESHOLD = 1000;
+	  private static final int DEFAULT_SHAKE_DURATION = 300;
+	  private static final int DEFAULT_PROCESS_DURATION = 2000;
+	  
+	  private int shakeDuration;
+	  private int processDuration;
+	  
 	  private static final int UPPER_SPEED_LIMIT = 3000;
+	  private static final int SHAKE_DURATION = 1500;
+	  private static final int PROCESS_DURATION = 3000;
 	  private long lastUpdate;
 	  private boolean firstShake;
 	  private long firstShakeTime;
@@ -85,6 +93,7 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
          asyncTask.delegate = this;
    	  // shake detection
        // lastUpdate = System.currentTimeMillis();
+                 
         sum = 0;
         firstShake = false;
          //Accelerometer
@@ -145,13 +154,21 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
 								}
 							}
 							else if(shaken == true){
-								if((curTime-beginShakeTime)>300){
+<<<<<<< HEAD
+								if((curTime-beginShakeTime)>SHAKE_DURATION){
+=======
+								if((curTime-beginShakeTime) > shakeDuration){
+>>>>>>> c84314ff897a566031849e4c26bb2e56390452c3
 									shaken = false;
 									sum = sum + 1;
 								}
 							}           		        	  
 
-							if(curTime - firstShakeTime > 2000){
+<<<<<<< HEAD
+							if(curTime - firstShakeTime > PROCESS_DURATION){
+=======
+							if(curTime - firstShakeTime > processDuration){
+>>>>>>> c84314ff897a566031849e4c26bb2e56390452c3
 									if(shaken==true){
 										shaken = false;
 										sum = sum+1;
@@ -179,7 +196,6 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
 		
 		long setAlarm = System.currentTimeMillis() + diff;
 		
-		
 		Intent intentAlarm = new Intent(this, AlarmReceiver.class);
 	    AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
         alarmManager.set(AlarmManager.RTC_WAKEUP, setAlarm, PendingIntent.getBroadcast(this,1,intentAlarm, PendingIntent.FLAG_UPDATE_CURRENT));
@@ -194,11 +210,24 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
 	// Ish's addition
 	protected void onResume() {
 	    super.onResume();
-	   // Log.d("Here1", "Here1");
-		SharedPreferences settings = getSharedPreferences(SettingsFragment.PREF, 0);
-	  //  Log.d("HereJ", j + "");
+
+	    //Values from SharedPreference
+ 		SharedPreferences settings = getSharedPreferences(SettingsFragment.PREF, 0);
 		SHAKE_THRESHOLD = SettingsFragment.THRESHOLD[settings.getInt("p1", 0)];
-//	    Log.d("Here3", "Here3");
+
+		//Overriding the shake & process Duration if its available in preference
+		try{
+			String p6 = settings.getString("p6",null);
+			shakeDuration = (p6 != null) ? Integer.parseInt(p6):DEFAULT_SHAKE_DURATION;
+		}
+		catch(Exception ex){shakeDuration = DEFAULT_SHAKE_DURATION;}
+		
+		try{
+			String p7 = settings.getString("p7",null);
+			processDuration = (p7 != null) ? Integer.parseInt(p7):DEFAULT_PROCESS_DURATION;
+		}
+		catch(Exception ex){processDuration = DEFAULT_PROCESS_DURATION;}
+		
 	    mSensorManager.registerListener(mySensorListener, mAccelerometer, SensorManager.SENSOR_DELAY_GAME);
 
 	//    Log.d("Here4", "Here4");
@@ -206,34 +235,43 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
 	}
 
 	public void weatherService(){
-		asyncTask.execute("http://weather.yahooapis.com/forecastrss?w=24150327&u=c");
+		String url = configProp.getProperty("weatherUrl");
+		SharedPreferences settings = getSharedPreferences(SettingsFragment.PREF, 0);
+		String woeId = settings.getString("p5", null);
+		
+		if (woeId == null)
+			return;
+		asyncTask.execute(url+woeId);
 	}
 	
 	@Override
 	public void processFinish(String output) {
-		//xmlResult = output;
-		if (output == null){
-			wInfoRetrieved = false;
-		}
-		else{
-			wInfoRetrieved = true;
-			
-			weatherInfo = new ArrayList<String>();
-			Document doc = getDomElement(output);
-			NodeList n2 = doc.getElementsByTagName("yweather:condition");
-			Element ele2 = (Element) n2.item(0);
-			
-			weatherInfo.add(ele2.getAttribute("temp"));
-			weatherInfo.add(ele2.getAttribute("code"));
-			
-			NodeList n3 = doc.getElementsByTagName("yweather:forecast");
-			Element ele3 = (Element) n3.item(0);
-			
-			weatherInfo.add(ele3.getAttribute("high"));
-			weatherInfo.add(ele3.getAttribute("low"));
-			weatherInfo.add(processCondition(ele3.getAttribute("code")));
+		
+		try{
+			if (output == null){
+				wInfoRetrieved = false;
+			}
+			else{
+				wInfoRetrieved = true;
+				
+				weatherInfo = new ArrayList<String>();
+				Document doc = getDomElement(output);
+				NodeList n2 = doc.getElementsByTagName("yweather:condition");
+				Element ele2 = (Element) n2.item(0);
+				
+				weatherInfo.add(ele2.getAttribute("temp"));
+				weatherInfo.add(ele2.getAttribute("code"));
+				
+				NodeList n3 = doc.getElementsByTagName("yweather:forecast");
+				Element ele3 = (Element) n3.item(0);
+				
+				weatherInfo.add(ele3.getAttribute("high"));
+				weatherInfo.add(ele3.getAttribute("low"));
+				weatherInfo.add(ele3.getAttribute("code"));
+			}
+			speakOut();
 		}
-		speakOut();
+		catch(Exception ex){return;}
 
 	}
 	
@@ -260,9 +298,13 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
     }
 	
 	public void speakOut() {
-   	 
+		SharedPreferences settings = getSharedPreferences(SettingsFragment.PREF, 0);
+		Boolean weatherVoiceEnabled = settings.getBoolean("p3", true);
+		if(!weatherVoiceEnabled)
+			return;
+		
     	HashMap<String, String> hm = new HashMap<String,String>();
-    	//tts.setSpeechRate(0.95F);
+    	tts.setSpeechRate(0.95F);
     	//tts.setPitch(0.9F);
     	tts.setLanguage(Locale.US);
     	tts.setOnUtteranceProgressListener(new UtteranceProgressListener(){
@@ -327,16 +369,7 @@ public class AlarmActivity extends Activity implements OnInitListener, AsyncResp
 			return text_en.getProperty("good_evening");
 	}
 	
-	private String processCondition(String val){
-		if(val.indexOf("AM") >= 0)
-			val = val.replace("AM", "morning");
-		else if(val.indexOf("PM") >= 0)
-			val = val.replace("PM", "afternoon");
-		
-		return val;
-	}
-	
-    public void sayGoodday(){
+	public void sayGoodday(){
     	tts.setOnUtteranceProgressListener(null);
     	String text = "Have a wonderful day";
     	tts.speak(text, TextToSpeech.QUEUE_ADD, null);
